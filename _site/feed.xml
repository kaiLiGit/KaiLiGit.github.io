<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-27T07:57:19-04:00</updated><id>http://localhost:4000/</id><title type="html">Kai Li</title><subtitle>Work Projects Portfolio</subtitle><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><entry><title type="html">Finding the Closest Starbucks</title><link href="http://localhost:4000/nearestStarbucks/" rel="alternate" type="text/html" title="Finding the Closest Starbucks" /><published>2016-12-01T00:00:00-05:00</published><updated>2016-12-01T00:00:00-05:00</updated><id>http://localhost:4000/nearestStarbucks</id><content type="html" xml:base="http://localhost:4000/nearestStarbucks/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Given a list of geological points, or locations in longitude and latitude,
find the nearest Starbucks locations to your current location.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;p&gt;Using the provided list of rarely changing Starbucks locations (longitudes, latitudes) coordinates. Find and implement a data structure that solves such kind of nearest-neighbor problem.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StudentStarbucks&lt;/code&gt; is the implmentation class and should support two operations:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void build(StarbucksLocation[] allStarbucks):&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;read in all Starbucks locations from a csv file. allStarbucks is a reference to an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation&lt;/code&gt; objects.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation&lt;/code&gt; contains four variables: city (string), address (string), lng (-180, 180), and lat (-90, 90).&lt;/li&gt;
      &lt;li&gt;retrieve data from csv and populate k-d tree data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation getNearest(double lng, double lat):&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;traverse k-d tree to find the nearest Starbucks location&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation:&lt;/h2&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/kdtrees.pdf&quot;&gt;Nearest Neighbor Search Pseudocode&lt;/a&gt; from CMU.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE274Project/tree/master/ClosestStarbucks/src&quot;&gt;StudentStarbucks.java&lt;/a&gt; code in &lt;em&gt;Finding the Nearest Starbucks&lt;/em&gt; Project GitHub Repo.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="nearest-neighbor" /><category term="k-d tree" /><category term="Java" /><summary type="html">nearest-neighbor, k-d tree, Java</summary></entry><entry><title type="html">Web Server Class</title><link href="http://localhost:4000/webServerClasses/" rel="alternate" type="text/html" title="Web Server Class" /><published>2016-11-20T00:00:00-05:00</published><updated>2016-11-20T00:00:00-05:00</updated><id>http://localhost:4000/webServerClasses</id><content type="html" xml:base="http://localhost:4000/webServerClasses/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Implement a basic server class that can serve as a web-server that respond to a &lt;em&gt;GET&lt;/em&gt; request for a file path.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Make use of server socket methods from boost library&lt;/li&gt;
  &lt;li&gt;Develop a basic web server to serve text, html, png, and jpeg files&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;GET&lt;/em&gt; request received in such format: &lt;code class=&quot;highlighter-rouge&quot;&gt;GET file HTTP/1.1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;file&lt;/em&gt; is &lt;em&gt;/&lt;/em&gt; should respond with contents of given index.html&lt;/li&gt;
  &lt;li&gt;valid &lt;em&gt;file&lt;/em&gt; path indicates such file is readable and the server should respond with the &lt;em&gt;file&lt;/em&gt;â€™s contents and appropriate HTTP headers &amp;amp; MIME type for the file derived from the &lt;em&gt;file&lt;/em&gt; name extension. The contents of the file can be sent to client by the server line-by-line.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Extension&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;MIME type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;.html&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;text/html&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.png&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;image/png&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.jpg&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;image/jpeg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.txt&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;text/plain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Default (i.e, in all other cases)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;text/plain&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;In cases of unreadable &lt;em&gt;file&lt;/em&gt; path, the server program should respond with the following HTTP 404 error response and body. The content length and file name would change based on the appropriate &lt;em&gt;file&lt;/em&gt; specified in the &lt;em&gt;GET&lt;/em&gt; request.
   Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/kaiLiGit/kaiLiGit.github.io/blob/master/images/projectImages/unreadblefile.png&quot; alt=&quot;alt text&quot; /&gt;
   ___&lt;/p&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="server socket" /><category term="C++" /><summary type="html">server socket, C++</summary></entry><entry><title type="html">Tweets to HTML</title><link href="http://localhost:4000/tweet2html/" rel="alternate" type="text/html" title="Tweets to HTML" /><published>2016-11-01T00:00:00-04:00</published><updated>2016-11-01T00:00:00-04:00</updated><id>http://localhost:4000/tweet2html</id><content type="html" xml:base="http://localhost:4000/tweet2html/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Given tweets in text, process the string of texts (words consists of characters)
into HTML format.&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;p&gt;Same as the problem requested, converts specific elements on a standard tweet into HTML format.&lt;/p&gt;

&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;
&lt;p&gt;There needs to be some pre-defined formats such that we could follow in our implementation of the tweet to html.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Each tweet should be wrapped around by HTML div tag (with CSS class tweet)
    &lt;ul&gt;
      &lt;li&gt;Texts should be placed in between &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;tweet&quot;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert tweet handle of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;@xyz&lt;/code&gt; to HTML anchors of the form:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/xyz&quot;&amp;gt;@xyz&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Another example: &lt;em&gt;@miamiuniversity&lt;/em&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/miamiuniversity&quot;&amp;gt;@miamiuniversity&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert &lt;code class=&quot;highlighter-rouge&quot;&gt;#abc&lt;/code&gt; to html anchor of the form:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/hashtag/abc&quot;&amp;gt;#abc&amp;lt;/a&amp;gt;&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Another example: &lt;code class=&quot;highlighter-rouge&quot;&gt;#LoveAndHonor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/hashtag/LoveAndHonor&quot;&amp;gt;#LoveAndHonor&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert emoticons to html image tags:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:-)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/smile.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:-(&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/frown.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:-|&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/normal.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:++&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/cpp.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Functional testings (done using Linux command lines)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ./tweet2html base_inputs.txt base_output.html&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ diff base_output.html expected_base_output.html&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tweet2html&lt;/code&gt;, the executable of this project&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base_inputs.txt&lt;/code&gt;, input file; &lt;code class=&quot;highlighter-rouge&quot;&gt;base_output.html&lt;/code&gt;, output file&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; command for testing the outcome of the program against the expected output&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;One more testing example:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ./tweet2html tweet_inputs.txt tweet_output.html&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ diff twee_output.html expected_tweet_output.html&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Header file omitted, and is essentially a simple derivation from the &lt;em&gt;.cpp&lt;/em&gt; methodsâ€™ signature.&lt;/p&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE278Project/blob/master/Project2/Tweet2Html.cpp&quot;&gt;Tweet2Html.cpp&lt;/a&gt;&lt;/p&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="string-processing" /><category term="C++" /><summary type="html">string-processing, C++</summary></entry></feed>