<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-27T11:04:00-04:00</updated><id>http://localhost:4000/</id><title type="html">Kai Li</title><subtitle>Work Projects Portfolio</subtitle><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><entry><title type="html">Image Search Program</title><link href="http://localhost:4000/imageSearching/" rel="alternate" type="text/html" title="Image Search Program" /><published>2017-10-01T00:00:00-04:00</published><updated>2017-10-01T00:00:00-04:00</updated><id>http://localhost:4000/imageSearching</id><content type="html" xml:base="http://localhost:4000/imageSearching/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Develop a simple image search program, i.e., simple algorithmic implmentation, moving
the mask image row-by-row and column-by-column from left-to-right and top-to-bottom.
Each matched image (.png format in [red, green, blue, alpha]) region in the larger
image would be surrounded with a red box.
&lt;img src=&quot;http://localhost:4000/images/projectImages/imgSearchExample.png&quot; alt=&quot;Image Search Example&quot; /&gt;
&lt;a href=&quot;https://github.com/kaiLiGit/High_Performance_Computing/blob/master/Homework%237/Homework7.pdf&quot;&gt;Detailed Project/HW info&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;p&gt;The emphasis lies in parallelism (OpenMP) that is to divide up this simple time-consuming algorithmic
approach to a computing cluster (Red Hawk cluster, used at Miami University in my case) to
speed up the image search processing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openmp.org/&quot;&gt;OpenMP&lt;/a&gt;:
    &lt;blockquote&gt;
      &lt;p&gt;The OpenMP API supports multi-platform shared-memory parallel programming in C/C++.
The OpenMP API defines a portable, scalable model with a simple and flexible interface
for developing parallel applications on platforms from the desktop to the supercomputer.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ideas&quot;&gt;Ideas&lt;/h2&gt;
&lt;p&gt;The parallelizing strategy boils down to understanding how to allocate individual tasks (or the
number of images / region matches) each thread has to do in the original pictures.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Two nested for-loops are used to iterate the original image and a region of the original image
is “cropped” as large as mask image, and the cropped region is moved one pixel at a time row-by-row
and column-by-column manner whenever the inner for-loop is executing, this we could visualized as one thread may be
responsible one or more of these column iterations in the inner for-loop at a particular column.
    &lt;blockquote&gt;
      &lt;p&gt;Depending on the number of threads, each thread may be assigned to different number of rows of
iterations moving the cropped images column by column in that row. In this case, OpenMP for
directive will implicitly deal with the intricacies of allocating number of rows of pixels to the
thread to move the cropped image column by column. OpenMP &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; directive will also take care of the
index bounds accordingly while allocating the number of rows or columns to each thread.
Since the cropped region and mask image are always the same or constant during the iterations of
the beginning two nested for-loops when used to calculate background averages and same shade matching,
we would just leave them as is. However, the matching pixel regions need to be stored in a list
and such list is shared data among all the threads, therefore we would create critical sections for
the list whenever it is being accessed or modified.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/High_Performance_Computing/blob/master/Homework%237/mysol/lik7_HW7_Report.pdf&quot;&gt;My organized HW report&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/High_Performance_Computing/blob/master/Homework%237/mysol/lik7_ImageSearch.cpp&quot;&gt;ImageSearch.cpp solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;:point_right:  &lt;a href=&quot;https://github.com/kaiLiGit/High_Performance_Computing/blob/master/Homework%237/mysol/Color.cpp&quot;&gt;color.cpp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/High_Performance_Computing/blob/master/Homework%237/mysol/ImageProcess.cpp&quot;&gt;ImageProcess.cpp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/High_Performance_Computing/blob/master/Homework%237/mysol/lik7_HW7_Report.pdf&quot;&gt;Program Report&lt;/a&gt;&lt;/p&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="OpenMp" /><category term="Image Processing" /><category term="C++" /><summary type="html">OpenMp, Image Processing, C++</summary></entry><entry><title type="html">Finding the Closest Starbucks</title><link href="http://localhost:4000/nearestStarbucks/" rel="alternate" type="text/html" title="Finding the Closest Starbucks" /><published>2016-12-01T00:00:00-05:00</published><updated>2016-12-01T00:00:00-05:00</updated><id>http://localhost:4000/nearestStarbucks</id><content type="html" xml:base="http://localhost:4000/nearestStarbucks/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Given a list of geological points, or locations in longitude and latitude,
find the nearest Starbucks locations to your current location.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;p&gt;Using the provided list of rarely changing Starbucks locations (longitudes, latitudes) coordinates. Find and implement a data structure that solves such kind of nearest-neighbor problem.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StudentStarbucks&lt;/code&gt; is the implmentation class and should support two operations:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void build(StarbucksLocation[] allStarbucks):&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;read in all Starbucks locations from a csv file. allStarbucks is a reference to an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation&lt;/code&gt; objects.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation&lt;/code&gt; contains four variables: city (string), address (string), lng (-180, 180), and lat (-90, 90).&lt;/li&gt;
      &lt;li&gt;retrieve data from csv and populate k-d tree data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation getNearest(double lng, double lat):&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;traverse k-d tree to find the nearest Starbucks location&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation:&lt;/h2&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/kdtrees.pdf&quot;&gt;Nearest Neighbor Search Pseudocode&lt;/a&gt; from CMU.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE274Project/tree/master/ClosestStarbucks/src&quot;&gt;StudentStarbucks.java&lt;/a&gt; code in &lt;em&gt;Finding the Nearest Starbucks&lt;/em&gt; Project GitHub Repo.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="nearest-neighbor" /><category term="k-d tree" /><category term="Java" /><summary type="html">nearest-neighbor, k-d tree, Java</summary></entry><entry><title type="html">Web Server Class</title><link href="http://localhost:4000/webServerClasses/" rel="alternate" type="text/html" title="Web Server Class" /><published>2016-11-20T00:00:00-05:00</published><updated>2016-11-20T00:00:00-05:00</updated><id>http://localhost:4000/webServerClasses</id><content type="html" xml:base="http://localhost:4000/webServerClasses/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Implement a basic server class that can serve as a web-server that respond to a &lt;em&gt;GET&lt;/em&gt; request for a file path.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Make use of server socket methods from boost library&lt;/li&gt;
  &lt;li&gt;Develop a basic web server to serve text, html, png, and jpeg files&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;GET&lt;/em&gt; request received in such format: &lt;code class=&quot;highlighter-rouge&quot;&gt;GET file HTTP/1.1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;file&lt;/em&gt; is &lt;em&gt;/&lt;/em&gt; should respond with contents of given index.html&lt;/li&gt;
  &lt;li&gt;valid &lt;em&gt;file&lt;/em&gt; path indicates such file is readable and the server should respond with the &lt;em&gt;file&lt;/em&gt;’s contents and appropriate HTTP headers &amp;amp; MIME type for the file derived from the &lt;em&gt;file&lt;/em&gt; name extension. The contents of the file can be sent to client by the server line-by-line.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Extension&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;MIME type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;.html&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;text/html&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.png&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;image/png&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.jpg&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;image/jpeg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.txt&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;text/plain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Default (i.e, in all other cases)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;text/plain&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;In cases of unreadable &lt;em&gt;file&lt;/em&gt; path, the server program should respond with the following HTTP 404 error response and body. The content length and file name would change based on the appropriate &lt;em&gt;file&lt;/em&gt; specified in the &lt;em&gt;GET&lt;/em&gt; request.
   Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;HTTP/1.1 404 Not Found
Server: SimpleServer
Content-Length: 47&lt;/p&gt;

&lt;p&gt;The following file was not found: data/blah.txt&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Funtional testing
    &lt;ul&gt;
      &lt;li&gt;run the executable after compilation of the server program&lt;/li&gt;
      &lt;li&gt;make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; command in Linux environment (wget serves as web-browser to GET data from any valid URL)&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-S&lt;/code&gt; option tells &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; to print headers sent by the web-browser&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-q&lt;/code&gt; option tells &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; to be as quiet (not to print additional info)&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-O&lt;/code&gt; option tells &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; to write the data from the web-server to a given file.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wget - S &quot;http://ceclnx01.cec.miamioh.edu:Port/Path&quot; -O my_Path 2&amp;gt; my_Path_hdrs.txt&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diff my_Path Path&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diff my_Path_hdrs.txt Path_hdrs.txt&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;Server Class implementation:
:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE278Project/blob/master/Project4/Server.cpp&quot;&gt;Server.cpp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Server Class declaration:
:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE278Project/blob/master/Project4/Server.h&quot;&gt;Server.h&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Main.cpp for testing purpose:
:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE278Project/blob/master/Project4/main.cpp&quot;&gt;main.cpp&lt;/a&gt;&lt;/p&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="server socket" /><category term="C++" /><summary type="html">server socket, C++</summary></entry><entry><title type="html">Tweets to HTML</title><link href="http://localhost:4000/tweet2html/" rel="alternate" type="text/html" title="Tweets to HTML" /><published>2016-11-01T00:00:00-04:00</published><updated>2016-11-01T00:00:00-04:00</updated><id>http://localhost:4000/tweet2html</id><content type="html" xml:base="http://localhost:4000/tweet2html/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Given tweets in text, process the string of texts (words consists of characters)
into HTML format.&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;p&gt;Same as the problem requested, converts specific elements on a standard tweet into HTML format.&lt;/p&gt;

&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;
&lt;p&gt;There needs to be some pre-defined formats such that we could follow in our implementation of the tweet to html.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Each tweet should be wrapped around by HTML div tag (with CSS class tweet)
    &lt;ul&gt;
      &lt;li&gt;Texts should be placed in between &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;tweet&quot;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert tweet handle of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;@xyz&lt;/code&gt; to HTML anchors of the form:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/xyz&quot;&amp;gt;@xyz&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Another example: &lt;em&gt;@miamiuniversity&lt;/em&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/miamiuniversity&quot;&amp;gt;@miamiuniversity&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert &lt;code class=&quot;highlighter-rouge&quot;&gt;#abc&lt;/code&gt; to html anchor of the form:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/hashtag/abc&quot;&amp;gt;#abc&amp;lt;/a&amp;gt;&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Another example: &lt;code class=&quot;highlighter-rouge&quot;&gt;#LoveAndHonor&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;https://www.twitter.com/hashtag/LoveAndHonor&quot;&amp;gt;#LoveAndHonor&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert emoticons to html image tags:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:-)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/smile.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:-(&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/frown.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:-|&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/normal.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:++&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://ceclnx01.cec.miamioh.edu/~raodm/hw3/cpp.png&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Functional testings (done using Linux command lines)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ./tweet2html base_inputs.txt base_output.html&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ diff base_output.html expected_base_output.html&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tweet2html&lt;/code&gt;, the executable of this project&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;base_inputs.txt&lt;/code&gt;, input file; &lt;code class=&quot;highlighter-rouge&quot;&gt;base_output.html&lt;/code&gt;, output file&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; command for testing the outcome of the program against the expected output&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;One more testing example:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ./tweet2html tweet_inputs.txt tweet_output.html&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ diff twee_output.html expected_tweet_output.html&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Header file omitted, and is essentially a simple derivation from the &lt;em&gt;.cpp&lt;/em&gt; methods’ signature.&lt;/p&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE278Project/blob/master/Project2/Tweet2Html.cpp&quot;&gt;Tweet2Html.cpp&lt;/a&gt;&lt;/p&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="string-processing" /><category term="C++" /><summary type="html">string-processing, C++</summary></entry></feed>