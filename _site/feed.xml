<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-26T11:06:41-04:00</updated><id>http://localhost:4000/</id><title type="html">Kai Li</title><subtitle>Work Projects Portfolio</subtitle><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><entry><title type="html">Finding the Closest Starbucks</title><link href="http://localhost:4000/perceptron/" rel="alternate" type="text/html" title="Finding the Closest Starbucks" /><published>2016-12-01T00:00:00-05:00</published><updated>2016-12-01T00:00:00-05:00</updated><id>http://localhost:4000/perceptron</id><content type="html" xml:base="http://localhost:4000/perceptron/">&lt;h2 id=&quot;problem&quot;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;Given a list of geological points, or locations in longitude and latitude,
find the nearest Starbucks locations to your current location.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;goal&quot;&gt;Goal:&lt;/h2&gt;
&lt;p&gt;Using the provided list of rarely changing Starbucks locations (longitudes, latitudes) coordinates. Find and implement a data structure that solves such kind of nearest-neighbor problem.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StudentStarbucks&lt;/code&gt; is the implmentation class and should support two operations:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void build(StarbucksLocation[] allStarbucks):&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;read in all Starbucks locations from a csv file. allStarbucks is a reference to an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation&lt;/code&gt; objects.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation&lt;/code&gt; contains four variables: city (string), address (string), lng (-180, 180), and lat (-90, 90).&lt;/li&gt;
      &lt;li&gt;retrieve data from csv and populate k-d tree data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StarbucksLocation getNearest(double lng, double lat):&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;traverse k-d tree to find the nearest Starbucks location&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/kdtrees.pdf&quot;&gt;Nearest Neighbor Search Pseudocode&lt;/a&gt; from CMU.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;:point_right: &lt;a href=&quot;https://github.com/kaiLiGit/CSE274Project/tree/master/ClosestStarbucks/src&quot;&gt;StudentStarbucks&lt;/a&gt; in Finding the Nearest Starbucks Project GitHub Repo.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Kai Li</name><email>kaivictorlee@163.com</email></author><category term="nearest-neighbor" /><category term="k-d tree" /><category term="Java" /><summary type="html">nearest-neighbor, k-d tree, Java</summary></entry></feed>